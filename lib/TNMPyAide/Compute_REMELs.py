# -*- coding: utf-8 -*-
"""
Created on Wed Feb  1 17:45:49 2023

@author: aaron.hastings
"""

import math
import numpy as np

class Compute_REMELs:
    
#            Avg			                   DGAC			                    OGAC			                    PCC		
# Cruise	 A	        B	       C	       A	      B	         C	        A	        B	        C	        A	        B  	        C
# Au	     41.740807  1.148546   50.128316   41.740807  0.494698	 50.128316  41.740807	-1.065026	50.128316	41.740807	3.520004	50.128316
# MT	     33.918713	20.591046  68.002978   33.918713  19.903775	 68.002978	33.918713	19.345214	68.002978	33.918713	22.141611	68.002978
# HT	     35.879850	21.019665  74.298135   35.879850  20.358498	 74.298135	35.879850	19.107151	74.298135	35.879850	21.822818	74.298135
# Bus	     23.479530	38.006238  68.002978   23.479530  37.318967	 68.002978	23.479530	36.760406	68.002978	23.479530	39.556803	68.002978
# MC	     41.022542	10.013879  56.086099   41.022542  10.013879	 56.086099	41.022542	10.013879	56.086099	41.022542	10.013879	56.086099
												
# 	              Avg			                    DGAC			                    OGAC			                    PCC		
# Full-Throttle	  A 	     B	        C	        A	        B	        C	        A	        B	        C	        A	        B	        C
# Au	          41.740807	 1.148546	67.000000	41.740807	0.494698	67.000000	41.740807	-1.065026	67.000000	41.740807	3.520004	67.000000
# MT	          33.918713	 20.591046	74.000000	33.918713	19.903775	74.000000	33.918713	19.345214	74.000000	33.918713	22.141611	74.000000
# HT	          35.879850	 21.019665	80.000000	35.879850	20.358498	80.000000	35.879850	19.107151	80.000000	35.879850	21.822818	80.000000
# Bus	          23.479530	 38.006238	74.000000	23.479530	37.318967	74.000000	23.479530	36.760406	74.000000	23.479530	39.556803	74.000000
# MC	          41.022542	 10.013879	67.000000	41.022542	10.013879	67.000000	41.022542	10.013879	67.000000	41.022542	10.013879	67.000000

    
    
    
    
    # Static method to compute Max SPL at TNM reference location (50 ft)
    # This is then converted to an LAEq using 10*log10(V/S)-13.2
    # Valid for: single vehicle type, 1-hour of traffic data, cruise
    @staticmethod
    def Compute_SPL(vehicle_type, hourly_traffic_vol, hourly_traffic_spd, pavement, engine = 'cruise'):
        
        coeffs = {'at': {'avg' : [41.740807, 1.148546, 50.128316], 'dgac' : [41.740807, 0.494698, 50.128316], 'ogac' : [41.740807, -1.065026, 50.128316], 'pcc' : [41.740807, 3.520004, 50.128316]}, 
                 'mt': {'avg' : [33.918713, 20.591046, 68.002978], 'dgac' : [33.918713, 19.903775, 68.002978], 'ogac' : [33.918713, 19.345214, 68.002978], 'pcc' : [33.918713, 22.141611, 68.002978]},
                 'ht': {'avg' : [35.879850, 21.019665, 74.298135], 'dgac' : [35.879850, 20.358498, 74.298135], 'ogac' : [35.879850, 19.107151, 74.298135], 'pcc' : [35.879850, 21.822818, 74.298135]},
                 'bus': {'avg' : [23.479530, 38.006238, 68.002978], 'dgac' : [23.479530, 37.318967, 68.002978], 'ogac' : [23.479530, 36.760406, 68.002978], 'pcc' : [23.479530, 39.556803, 68.002978]},
                 'mc': {'avg' : [41.022542, 10.013879, 56.086099], 'dgac' : [41.022542, 10.013879, 56.086099], 'ogac' : [41.022542, 10.013879, 56.086099], 'pcc' : [41.022542, 10.013879, 56.086099]}}

        if engine.upper() == 'FULL_THROTTLE':
            coeffs = {'at': {'avg' : [41.740807, 1.148546, 67], 'dgac' : [41.740807, 0.494698, 67], 'ogac' : [41.740807, -1.065026, 67], 'pcc' : [41.740807, 3.520004, 67]}, 
                 'mt': {'avg' : [33.918713,	20.591046, 74], 'dgac' : [33.918713, 19.903775, 74], 'ogac' : [33.918713, 19.345214, 74], 'pcc' : [33.918713, 22.141611, 74]},
                 'ht': {'avg' : [35.87985,	21.019665, 80], 'dgac' : [35.87985, 20.358498, 80], 'ogac' : [35.87985, 19.107151, 80], 'pcc' : [35.87985, 21.822818, 80]},
                 'bus': {'avg' : [23.47953,	38.006238, 74], 'dgac' : [23.47953, 37.318967, 74], 'ogac' : [23.47953, 36.760406, 74], 'pcc' : [23.47953, 39.556803, 74]},
                 'mc': {'avg' : [41.022542,	10.013879, 67], 'dgac' : [41.022542, 10.013879, 67], 'ogac' : [41.022542, 10.013879, 67], 'pcc' : [41.022542, 10.013879, 67]}}

        # Determine Max Reference Level for Single Vehicle
        vehicle_type = vehicle_type.lower()
        pavement = pavement.lower()
        abc = coeffs[vehicle_type][pavement]
        energy_1 = np.power(hourly_traffic_spd, abc[0]/10) * np.power(10, abc[1]/10) + np.power(10, abc[2]/10)
        spl_1 = 10 * np.log10(energy_1)
        
        # Convert to LAeq, accounting for volume and speed
        spl = spl_1 + 10 * np.log10(hourly_traffic_vol/(1.60934*hourly_traffic_spd)) - 13.2
        
        # At this point we have an hourly average, however, it assumes that we have an infinite roadway length, which is ok for DANA
        
        return spl